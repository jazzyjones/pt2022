{
  "hash": "e46461227f07c0452cde140106614346",
  "result": {
    "markdown": "---\ntitle: \"Plano de Trabalho - teste inicial\"\nauthor: \"Joaquim\"\ndate: \"12/19/2022\"\nformat: \n  html: \n    code-fold: true\n    fig-height: 4\n    fig-width: 5\nexecute:\n  freeze: true  # never re-render during project render\n  warning: false\n---\n\n\n\n\n## Carregando bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(sf)\nlibrary(units)\n```\n:::\n\n\n## *locale* e *crs*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Pesquisar depois e adaptar para utilizar o pacote geobr ao invés dos geopackages\n\nSys.setenv(LANG = \"English\")\n\n#\n# CRS para cálculo de áreas - \n# A Diretoria de Geociências – DGC do IBGE através da Coordenação de Cartografia - CCAR, elaborou um estudo (FRANÇA e MARANHÃO, 2015)\n# de geração de uma grade estatística para o Brasil buscando minimizar as distorções decorrentes da grande extensão territorial do país.\n# Neste contexto, foi feita a opção pela utilização da Projeção Equivalente de Albers, que apresenta como característica principal \n# a equivalência em área. Essa projeção é formada por um cone ao redor do globo, sob o qual as feições da superfície terrestre são \n# projetadas. Este cone intercepta o globo em dois paralelos padrão, com os meridianos formando linhas retas com a origem em um ponto\n# central na geratriz do cone, enquanto os paralelos formam círculos concêntricos em torno deste ponto. O datum horizontal adotado é o\n# SIRGAS2000.\n# \n# Os parâmetros da projeção adotada são:\n# Meridiano Central -54º\n# Latitude de Origem -12º\n# 1º Paralelo Padrão -2º\n# 2º Paralelo Padrão -22º\n# Origem E: 5.000.000\n# Origem N: 10.000.000\n# Área de Abrangência canto inferior esquerdo (E,N):\n#   2.800.000, 7.350.000\n# canto superior direito (E,N):\n#   8.210.000, 12.200.000\n#\n# https://spatialreference.org/ref/sr-org/albers-conical-equal-area-brazil-sirgas-2000/\n#\n# +proj=aea +lat_1=-2 +lat_2=-22 +lat_0=-12 +lon_0=-54 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\n#\n\n# endereço do arquivo geopackage com as camadas de amostragem para calculo dos coeficientes dos municípios\n\n\n\nProj_IBGE_area <- 'PROJCS[\"Conica_Equivalente_de_Albers_Brasil\",\n                         GEOGCS[\"GCS_SIRGAS2000\",\n                                DATUM[\"D_SIRGAS2000\",\n                                      SPHEROID[\"Geodetic_Reference_System_of_1980\",6378137,298.2572221009113]],\n                                PRIMEM[\"Greenwich\",0],\n                                UNIT[\"Degree\",0.017453292519943295]],\n                         PROJECTION[\"Albers\"],\n                         PARAMETER[\"standard_parallel_1\",-2],\n                         PARAMETER[\"standard_parallel_2\",-22],\n                         PARAMETER[\"latitude_of_origin\",-12],\n                         PARAMETER[\"central_meridian\",-54],\n                         PARAMETER[\"false_easting\",5000000],\n                         PARAMETER[\"false_northing\",10000000],\n                         UNIT[\"Meter\",1]]'\n```\n:::\n\n\n## Áreas urbanizadas 2015\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBegin_time <- Sys.time()\n\n# Carrega camada do Areas urbanizadas\nAreasUrb2015 <- st_read(\"C:/ACELERADOR/Bases/AreasUrbanizadas2015.gpkg\",\n                        query = \"SELECT Densidade, Tipo, CodConcUrb, geom FROM AreasUrbanizadas2015_CorrecaoTopologia\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading query `SELECT Densidade, Tipo, CodConcUrb, geom FROM AreasUrbanizadas2015_CorrecaoTopologia'\nfrom data source `C:\\ACELERADOR\\Bases\\AreasUrbanizadas2015.gpkg' using driver `GPKG'\nSimple feature collection with 13712 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XYZ\nBounding box:  xmin: -67.95836 ymin: -32.50709 xmax: -34.79333 ymax: 3.199139\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  SIRGAS 2000\n```\n:::\n\n```{.r .cell-code}\nend_time <- Sys.time()\nTempo_areasurb <- end_time - Begin_time\n```\n:::\n\n\n## Municípios\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# Carrega camada dos municípios\nMunicipios <- st_read(\"C:/ACELERADOR/Bases/MUNICIPIOS.gpkg\",\n                      layer = \"BRMUE250GC_SIR_2010\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BRMUE250GC_SIR_2010' from data source \n  `C:\\ACELERADOR\\Bases\\MUNICIPIOS.gpkg' using driver `GPKG'\nSimple feature collection with 5567 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -73.99045 ymin: -33.75208 xmax: -28.83591 ymax: 5.271841\nGeodetic CRS:  SIRGAS 2000\n```\n:::\n\n```{.r .cell-code}\n# Repara erro de topologia dos municípios\nMunicipios <- st_make_valid(Municipios)\n\n# Seleciona os municípios que interseccionam a camada de áreas urbanizadas (mapeados)\nMunicipios_proc <- Municipios[AreasUrb2015, op = st_intersects]\n\n# Remove a camada original de municípios para liberar memória\nrm(Municipios)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          used (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 1405478 75.1    2574421 137.5  2574421 137.5\nVcells 7394988 56.5   45627689 348.2 52579498 401.2\n```\n:::\n\n```{.r .cell-code}\n# Cria a sequência de geocódigos dos municípios\nListaMun <- Municipios_proc$CD_GEOCODM\n# ListaMun <- Municipios_proc$CD_GEOCODM[Municipios_proc$NM_MUNICIP == \"RIO DE JANEIRO\"]\nListaMun <- ListaMun[1]\n# ListaMun <- c(\"2307700\", \"2304202\") # município que tá dando erro\n# ListaMun <- c(\"3124104\", \"3136652\", \"3130101\", \"3106705\", \"3162922\", \"3109006\", \"3140159\", \"3165537\", \"3149309\",\n#               \"3118601\", \"3154606\", \"3129806\", \"3106200\", \"3162955\", \"3144805\", \"3171204\", \"3117876\", \"3137601\",\n#               \"3157807\", \"3156700\", \"3153905\", \"3154804\", \"3110004\") ## BH\n\nend_time <- Sys.time()\nTempo_municipios <- end_time - start_time\n```\n:::\n\n\n## *loop* de geoprocessamento\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# Cria a lista vazia para receber os data.frames / sf interseccionados e com áreas calculadas\nTabelaCalcCoef <- list()\n\n# loop para intersecao das bases e calculo de areas\nfor (i in ListaMun) {\n  \n  # Seleciona e o município\n  Mun <- Municipios_proc %>%\n    filter(CD_GEOCODM == i)\n  \n  # extrai a geometria do municipio e converte para texto\n  Mun_wkt <- Mun %>%\n    st_geometry() %>%\n    st_as_text()\n  \n  # carrega a grade estatistica filtrando com a geometria do municipio\n  grade <- st_read(\"C:/ACELERADOR/Bases/GradeEstatistica.gpkg\",\n                   query = \"SELECT ID_UNICO, POP, DOM_OCU, Shape_Area as AreaGrade, geom FROM GradeEstatistica\",\n                   wkt_filter = Mun_wkt)\n  \n  # seleciona as celulas da grade que estejam completamente dentro do municipio\n  grade <- grade[Mun, op = st_within]\n  \n  # reprojeta a grade para coordenadas planas\n  grade <- st_transform(grade, Proj_IBGE_area)\n  \n  # cria a query dos setores \n  query_setor <- str_c(\"SELECT CD_GEOCODI, CD_GEOCODS, CD_GEOCODD, CD_GEOCODM, NM_MUNICIP, UF, geom FROM 'SETORES CENSITÁRIOS' WHERE CD_GEOCODM = \", i)\n  \n  # carrega os setores censitarios do municipio\n  setores <- st_read(\"C:/ACELERADOR/Bases/BASE_2010.gpkg\",\n                     query = query_setor)\n  \n  # reprojeta os setores para coordenadas planas\n  setores <- st_transform(setores, Proj_IBGE_area)\n  \n  # seleciona as áreas urbanizadas que interseccionem o município\n  areas_urb <- AreasUrb2015[Mun, op = st_intersects]\n  \n  # reprojeta as áreas urbanizadas para coordenadas planas\n  areas_urb <- st_transform(areas_urb, Proj_IBGE_area)\n  \n  # interseciona a grade com os setores \n  intersecao <- st_intersection(grade, setores)\n  \n  # interseciona a camada de grade+setores com as areas urbanizadas\n  intersecao_urb <- st_intersection(intersecao, areas_urb)\n  \n  # cria a camada diferenca de grade+setores com as areas urbanizdas\n  diferenca_urb <- st_difference(intersecao, st_union(areas_urb))\n  \n  # junta as duas camadas - grade+setores+areas urbanizadas e grade+setor-areas urbanizadas\n  intersecao <- bind_rows(intersecao_urb, diferenca_urb)\n  \n  # calcula as áreas dos segmentos resultantes\n  tabela_areas <- intersecao %>%\n    mutate(Area_Inter = st_area(intersecao))\n  \n  # exporta para um geopackage para avaliação\n  st_write(st_transform(tabela_areas, crs = 4674), dsn = \"C:/ACELERADOR/EsPop_coef.gpkg\", layer = i, append = FALSE)\n  \n  # converte para numeros, sem unidade\n  attributes(tabela_areas$Area_Inter) <- NULL\n  \n  # remove a geometria para liberar memoria\n  st_geometry(tabela_areas) <- NULL\n  gc()\n  \n  # insere na lista de tabelas\n  TabelaCalcCoef[[i]] = tabela_areas\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading query `SELECT ID_UNICO, POP, DOM_OCU, Shape_Area as AreaGrade, geom FROM GradeEstatistica'\nfrom data source `C:\\ACELERADOR\\Bases\\GradeEstatistica.gpkg' using driver `GPKG'\nSimple feature collection with 28844 features and 4 fields (with 15053 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -69.36849 ymin: -10.49227 xmax: -67.47519 ymax: -9.50236\nGeodetic CRS:  SIRGAS 2000\nReading query `SELECT CD_GEOCODI, CD_GEOCODS, CD_GEOCODD, CD_GEOCODM, NM_MUNICIP, UF, geom FROM 'SETORES CENSITÁRIOS' WHERE CD_GEOCODM = 1200401'\nfrom data source `C:\\ACELERADOR\\Bases\\BASE_2010.gpkg' using driver `GPKG'\nSimple feature collection with 341 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -69.36378 ymin: -10.48533 xmax: -67.48169 ymax: -9.505231\nGeodetic CRS:  SIRGAS 2000\nDeleting layer `1200401' using driver `GPKG'\nWriting layer `1200401' to data source \n  `C:/ACELERADOR/EsPop_coef.gpkg' using driver `GPKG'\nWriting 19256 features with 14 fields and geometry type 3D Unknown (any).\n```\n:::\n\n```{.r .cell-code}\nend_time <- Sys.time()\nTempo_geoproc <- end_time - start_time\n```\n:::\n\n\n## Consolidação da tabela de cálculo e limpeza da memória\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# consolida a tabela de calculo a partir da lista de tabelas\nTabelaCalcCoef <- bind_rows(TabelaCalcCoef)\n\n# limpa a memoria de objetos não mais necessarios\n# rm(list = setdiff(ls(), c(\"TabelaCalcCoef\", \"ListaMun\", \"Begin_time\", \"start_time\", \"Tempo_areasurb\", \"Tempo_municipios\", \"Tempo_geoproc\")))\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          used (Mb) gc trigger  (Mb) max used  (Mb)\nNcells 1622239 86.7    2574421 137.5  2574421 137.5\nVcells 9172329 70.0   29201722 222.8 52579498 401.2\n```\n:::\n\n```{.r .cell-code}\nend_time <- Sys.time()\nTempo_cons <- end_time - start_time\n```\n:::\n\n\n## Somatório das áreas por setor / classe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# remove as unidades de área (m^2)\nTabelaCalcCoef <- drop_units(TabelaCalcCoef)\n\n# soma as áreas totais dos setores por classe de densidade usando data.table\nsetDT(TabelaCalcCoef)\nTabelaCalcCoef <- (\n  TabelaCalcCoef\n  [, ClasseUrb := fcase(Tipo == \"Área urbanizada\" & Densidade == \"Densa\", \"UrDs\",\n                        Tipo == \"Área urbanizada\" & Densidade == \"Pouco densa\", \"UrPd\",\n                        Tipo == \"Outros equipamentos urbanos\", \"NRes\",\n                        Tipo == \"Vazio intraurbano\", \"Vaz\", is.na(Tipo), \"Vaz\")]\n  [ClasseUrb == \"UrDs\", AreUrDsSet := sum(Area_Inter), by = CD_GEOCODI]\n  [ClasseUrb == \"UrPd\", AreUrPdSet := sum(Area_Inter), by = CD_GEOCODI]\n  [ClasseUrb == \"NRes\", AreNResSet := sum(Area_Inter), by = CD_GEOCODI]\n  [ClasseUrb == \"Vaz\", AreaVazSet := sum(Area_Inter), by = CD_GEOCODI]\n  [is.na(AreUrDsSet), AreUrDsSet := 0]\n  [is.na(AreUrPdSet), AreUrPdSet := 0]\n  [is.na(AreNResSet), AreNResSet := 0]\n  [is.na(AreaVazSet), AreaVazSet := 0]\n  [, AreUrDsSet := max(AreUrDsSet), by = CD_GEOCODI]\n  [, AreUrPdSet := max(AreUrPdSet), by = CD_GEOCODI]\n  [, AreNResSet := max(AreNResSet), by = CD_GEOCODI]\n  [, AreaVazSet := max(AreaVazSet), by = CD_GEOCODI]\n)\nend_time <- Sys.time()\nTempo_calcarea <- end_time - start_time\n```\n:::\n\n\n## Preparo da tabela para procedimento de otimização\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n# remove segmentos sem associacao com grade ou setor (problemas de topologia)\nTabelaCalcCoef <- na.omit(TabelaCalcCoef, cols = c(\"CD_GEOCODI\", \"ID_UNICO\"))\n\n# Cria lista de setores\nListaSet <- unique(TabelaCalcCoef$CD_GEOCODI)\nstr_c(ListaSet, collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"120040105000112, 120040105000113, 120040105000114, 120040105000115, 120040105000116, 120040105000179, 120040105000181, 120040105000182, 120040105000183, 120040105000184, 120040105000185, 120040105000186, 120040105000187, 120040105000188, 120040105000189, 120040105000190, 120040105000191, 120040105000192, 120040105000193, 120040105000194, 120040105000195, 120040105000196, 120040105000197, 120040105000198, 120040105000199, 120040105000200, 120040105000201, 120040105000202, 120040105000203, 120040105000204, 120040105000205, 120040105000206, 120040105000207, 120040105000208, 120040105000209, 120040105000210, 120040105000211, 120040105000212, 120040105000213, 120040105000214, 120040105000215, 120040105000216, 120040105000217, 120040105000235, 120040105000236, 120040105000237, 120040105000247, 120040105000252, 120040105000297, 120040105000298, 120040105000299, 120040105000300, 120040105000301, 120040105000302, 120040105000317, 120040105000318, 120040105000325, 120040105000326, 120040105000327, 120040105000334, 120040105000336, 120040105000341, 120040105000101, 120040105000102, 120040105000103, 120040105000104, 120040105000105, 120040105000106, 120040105000107, 120040105000108, 120040105000109, 120040105000110, 120040105000111, 120040105000001, 120040105000002, 120040105000003, 120040105000004, 120040105000005, 120040105000006, 120040105000007, 120040105000008, 120040105000009, 120040105000010, 120040105000011, 120040105000012, 120040105000013, 120040105000014, 120040105000015, 120040105000016, 120040105000017, 120040105000018, 120040105000019, 120040105000020, 120040105000021, 120040105000022, 120040105000023, 120040105000024, 120040105000025, 120040105000026, 120040105000027, 120040105000028, 120040105000029, 120040105000030, 120040105000031, 120040105000032, 120040105000033, 120040105000034, 120040105000035, 120040105000036, 120040105000037, 120040105000038, 120040105000039, 120040105000040, 120040105000041, 120040105000042, 120040105000043, 120040105000044, 120040105000045, 120040105000046, 120040105000047, 120040105000048, 120040105000049, 120040105000050, 120040105000051, 120040105000052, 120040105000053, 120040105000054, 120040105000055, 120040105000057, 120040105000058, 120040105000059, 120040105000060, 120040105000061, 120040105000062, 120040105000063, 120040105000064, 120040105000065, 120040105000066, 120040105000067, 120040105000068, 120040105000069, 120040105000070, 120040105000071, 120040105000072, 120040105000073, 120040105000074, 120040105000075, 120040105000076, 120040105000077, 120040105000078, 120040105000079, 120040105000080, 120040105000081, 120040105000082, 120040105000083, 120040105000084, 120040105000085, 120040105000086, 120040105000092, 120040105000093, 120040105000094, 120040105000095, 120040105000096, 120040105000097, 120040105000098, 120040105000099, 120040105000100, 120040105000117, 120040105000118, 120040105000119, 120040105000120, 120040105000121, 120040105000122, 120040105000123, 120040105000124, 120040105000125, 120040105000126, 120040105000127, 120040105000128, 120040105000129, 120040105000130, 120040105000131, 120040105000132, 120040105000134, 120040105000135, 120040105000136, 120040105000137, 120040105000138, 120040105000139, 120040105000140, 120040105000157, 120040105000158, 120040105000159, 120040105000160, 120040105000161, 120040105000162, 120040105000163, 120040105000164, 120040105000165, 120040105000166, 120040105000167, 120040105000168, 120040105000169, 120040105000170, 120040105000171, 120040105000172, 120040105000173, 120040105000177, 120040105000178, 120040105000180, 120040105000222, 120040105000223, 120040105000224, 120040105000225, 120040105000226, 120040105000227, 120040105000228, 120040105000230, 120040105000233, 120040105000248, 120040105000275, 120040105000277, 120040105000279, 120040105000281, 120040105000282, 120040105000283, 120040105000284, 120040105000285, 120040105000286, 120040105000287, 120040105000288, 120040105000293, 120040105000295, 120040105000296, 120040105000303, 120040105000338, 120040105000339, 120040105000145, 120040105000146, 120040105000147, 120040105000148, 120040105000149, 120040105000150, 120040105000151, 120040105000152, 120040105000153, 120040105000154, 120040105000155, 120040105000156, 120040105000174, 120040105000175, 120040105000176, 120040105000232, 120040105000234, 120040105000261, 120040105000290, 120040105000294, 120040105000141, 120040105000340, 120040105000133, 120040105000142, 120040105000143, 120040105000144, 120040105000229, 120040105000231, 120040105000289, 120040105000291, 120040105000292, 120040105000304, 120040105000305, 120040105000337, 120040105000242, 120040105000243, 120040105000244, 120040105000310, 120040105000311, 120040105000312, 120040105000314, 120040105000056, 120040105000087, 120040105000088, 120040105000089, 120040105000090, 120040105000091, 120040105000218, 120040105000219, 120040105000220, 120040105000221, 120040105000238, 120040105000241, 120040105000276, 120040105000278, 120040105000280, 120040105000328, 120040105000333, 120040105000239, 120040105000240, 120040105000246, 120040105000306, 120040105000307, 120040105000308, 120040105000309, 120040105000316, 120040105000258, 120040105000245, 120040105000315, 120040105000313, 120040105000335, 120040105000256, 120040105000332, 120040105000257, 120040105000249, 120040105000273, 120040105000319, 120040105000260, 120040105000259, 120040105000250, 120040105000251, 120040105000253, 120040105000254, 120040105000255, 120040105000262, 120040105000263, 120040105000264, 120040105000265, 120040105000266, 120040105000267, 120040105000268, 120040105000269, 120040105000270, 120040105000271, 120040105000272, 120040105000274, 120040105000320, 120040105000321, 120040105000322, 120040105000323, 120040105000324, 120040105000329, 120040105000330, 120040105000331\"\n```\n:::\n\n```{.r .cell-code}\n# cria a query com os geocodigos dos setores\nquery_set <- str_glue(\"SELECT Cod_setor, V001, V002 FROM 'Basico' WHERE Cod_setor IN (\", str_c(ListaSet, collapse = \", \"), \")\", collapse = \"\")\n\n# Carrega a tabela de variáveis dos setores\nVarSetores <- st_read(\"C:/ACELERADOR/Bases/BASE_2010.gpkg\",\n                      query = query_set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading query `SELECT Cod_setor, V001, V002 FROM 'Basico' WHERE Cod_setor IN (120040105000112, 120040105000113, 120040105000114, 120040105000115, 120040105000116, 120040105000179, 120040105000181, 120040105000182, 120040105000183, 120040105000184, 120040105000185, 120040105000186, 120040105000187, 120040105000188, 120040105000189, 120040105000190, 120040105000191, 120040105000192, 120040105000193, 120040105000194, 120040105000195, 120040105000196, 120040105000197, 120040105000198, 120040105000199, 120040105000200, 120040105000201, 120040105000202, 120040105000203, 120040105000204, 120040105000205, 120040105000206, 120040105000207, 120040105000208, 120040105000209, 120040105000210, 120040105000211, 120040105000212, 120040105000213, 120040105000214, 120040105000215, 120040105000216, 120040105000217, 120040105000235, 120040105000236, 120040105000237, 120040105000247, 120040105000252, 120040105000297, 120040105000298, 120040105000299, 120040105000300, 120040105000301, 120040105000302, 120040105000317, 120040105000318, 120040105000325, 120040105000326, 120040105000327, 120040105000334, 120040105000336, 120040105000341, 120040105000101, 120040105000102, 120040105000103, 120040105000104, 120040105000105, 120040105000106, 120040105000107, 120040105000108, 120040105000109, 120040105000110, 120040105000111, 120040105000001, 120040105000002, 120040105000003, 120040105000004, 120040105000005, 120040105000006, 120040105000007, 120040105000008, 120040105000009, 120040105000010, 120040105000011, 120040105000012, 120040105000013, 120040105000014, 120040105000015, 120040105000016, 120040105000017, 120040105000018, 120040105000019, 120040105000020, 120040105000021, 120040105000022, 120040105000023, 120040105000024, 120040105000025, 120040105000026, 120040105000027, 120040105000028, 120040105000029, 120040105000030, 120040105000031, 120040105000032, 120040105000033, 120040105000034, 120040105000035, 120040105000036, 120040105000037, 120040105000038, 120040105000039, 120040105000040, 120040105000041, 120040105000042, 120040105000043, 120040105000044, 120040105000045, 120040105000046, 120040105000047, 120040105000048, 120040105000049, 120040105000050, 120040105000051, 120040105000052, 120040105000053, 120040105000054, 120040105000055, 120040105000057, 120040105000058, 120040105000059, 120040105000060, 120040105000061, 120040105000062, 120040105000063, 120040105000064, 120040105000065, 120040105000066, 120040105000067, 120040105000068, 120040105000069, 120040105000070, 120040105000071, 120040105000072, 120040105000073, 120040105000074, 120040105000075, 120040105000076, 120040105000077, 120040105000078, 120040105000079, 120040105000080, 120040105000081, 120040105000082, 120040105000083, 120040105000084, 120040105000085, 120040105000086, 120040105000092, 120040105000093, 120040105000094, 120040105000095, 120040105000096, 120040105000097, 120040105000098, 120040105000099, 120040105000100, 120040105000117, 120040105000118, 120040105000119, 120040105000120, 120040105000121, 120040105000122, 120040105000123, 120040105000124, 120040105000125, 120040105000126, 120040105000127, 120040105000128, 120040105000129, 120040105000130, 120040105000131, 120040105000132, 120040105000134, 120040105000135, 120040105000136, 120040105000137, 120040105000138, 120040105000139, 120040105000140, 120040105000157, 120040105000158, 120040105000159, 120040105000160, 120040105000161, 120040105000162, 120040105000163, 120040105000164, 120040105000165, 120040105000166, 120040105000167, 120040105000168, 120040105000169, 120040105000170, 120040105000171, 120040105000172, 120040105000173, 120040105000177, 120040105000178, 120040105000180, 120040105000222, 120040105000223, 120040105000224, 120040105000225, 120040105000226, 120040105000227, 120040105000228, 120040105000230, 120040105000233, 120040105000248, 120040105000275, 120040105000277, 120040105000279, 120040105000281, 120040105000282, 120040105000283, 120040105000284, 120040105000285, 120040105000286, 120040105000287, 120040105000288, 120040105000293, 120040105000295, 120040105000296, 120040105000303, 120040105000338, 120040105000339, 120040105000145, 120040105000146, 120040105000147, 120040105000148, 120040105000149, 120040105000150, 120040105000151, 120040105000152, 120040105000153, 120040105000154, 120040105000155, 120040105000156, 120040105000174, 120040105000175, 120040105000176, 120040105000232, 120040105000234, 120040105000261, 120040105000290, 120040105000294, 120040105000141, 120040105000340, 120040105000133, 120040105000142, 120040105000143, 120040105000144, 120040105000229, 120040105000231, 120040105000289, 120040105000291, 120040105000292, 120040105000304, 120040105000305, 120040105000337, 120040105000242, 120040105000243, 120040105000244, 120040105000310, 120040105000311, 120040105000312, 120040105000314, 120040105000056, 120040105000087, 120040105000088, 120040105000089, 120040105000090, 120040105000091, 120040105000218, 120040105000219, 120040105000220, 120040105000221, 120040105000238, 120040105000241, 120040105000276, 120040105000278, 120040105000280, 120040105000328, 120040105000333, 120040105000239, 120040105000240, 120040105000246, 120040105000306, 120040105000307, 120040105000308, 120040105000309, 120040105000316, 120040105000258, 120040105000245, 120040105000315, 120040105000313, 120040105000335, 120040105000256, 120040105000332, 120040105000257, 120040105000249, 120040105000273, 120040105000319, 120040105000260, 120040105000259, 120040105000250, 120040105000251, 120040105000253, 120040105000254, 120040105000255, 120040105000262, 120040105000263, 120040105000264, 120040105000265, 120040105000266, 120040105000267, 120040105000268, 120040105000269, 120040105000270, 120040105000271, 120040105000272, 120040105000274, 120040105000320, 120040105000321, 120040105000322, 120040105000323, 120040105000324, 120040105000329, 120040105000330, 120040105000331)'\nfrom data source `C:\\ACELERADOR\\Bases\\BASE_2010.gpkg' using driver `GPKG'\n```\n:::\n\n```{.r .cell-code}\n# Converte as variaveis populacao e domicilio para numerico e renomeia a variavel de geocodigo do setor\nVarSetores <- as.data.table(VarSetores)\nVarSetores <- VarSetores[, ':='(V001 = as.numeric(V001),\n                                V002 = as.numeric(V002),\n                                CD_GEOCODI = Cod_setor)]\n\n# Associa as variaveis domicilios e moradores dos setores a tabela de calculo\nTabelaCalcCoef <- VarSetores[TabelaCalcCoef, on = \"CD_GEOCODI\"]\n\n# assigna o valor 0 para os setores sem valor nas variáveis V001 e V002\nTabelaCalcCoef <- (\n  TabelaCalcCoef[is.na(V001), V001 := 0]\n  [is.na(V002), V002 := 0]\n)\n\n# Cria variaveis de controle de amostra e seleciona as colunas relevantes\nTabelaCalcCoef <- (\n  TabelaCalcCoef\n  [, NC_Cont := uniqueN(ClasseUrb), by = CD_GEOCODI]\n  [, grd_amostra := fifelse(any(NC_Cont > 1), TRUE, FALSE), by = ID_UNICO]\n  [, ':=' (N_SubD = uniqueN(CD_GEOCODS), N_Dist = uniqueN(CD_GEOCODD), N_Mun = uniqueN(CD_GEOCODM)),by = ID_UNICO]\n  [, .(CD_GEOCODI, CD_GEOCODS, CD_GEOCODD, CD_GEOCODM, NM_MUNICIP, UF, ID_UNICO, NC_Cont, grd_amostra, N_SubD, N_Dist, N_Mun,\n       POP, DOM_OCU, V001, V002, Area_Inter, ClasseUrb, AreUrDsSet, AreUrPdSet, AreNResSet, AreaVazSet)]\n)\n\n# ordena segundo o geocodigo do setor - crescente\nsetorder(TabelaCalcCoef, CD_GEOCODI)\n\n# pivota a tabela, com o total das áreas por classe para cada segmento\nTabelaCalcCoef <- dcast(TabelaCalcCoef, ... ~ ClasseUrb,\n                        fun = sum,\n                        value.var = \"Area_Inter\",\n                        fill = 0)\n\n# verifica a existência das colunas de áreas por classe dos segmentos, e cria as faltantes com valor 0\ncolunas <- c(\"UrDs\", \"UrPd\", \"NRes\", \"Vaz\")\nsetDF(TabelaCalcCoef)\nTabelaCalcCoef[colunas[!(colunas %in% colnames(TabelaCalcCoef))]] = 0  # semantica de Base R... devo tentar entender em algum momento\nsetDT(TabelaCalcCoef)\n\n# elimina segmentos que não pertencem à células da grade utilizadas na amostra - tabela final para calculo\nTabelaCalcCoef <- TabelaCalcCoef[grd_amostra == TRUE]\n\n## Integrar a parte de calculo dos coeficientes\n\nend_time <- Sys.time()\nTempo_tabela <- end_time - start_time\n```\n:::\n\n\n## Declaração das variáveis e funcões para otimização\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\npar.ini <- c(1, 1, 1, 1)\nubound <- c(10^9, 10^9, 10^9, 10^9) # testar pra ver se resolve os erros\nlbound <- c(10^-9, 10^-9, 10^-9, 10^-9)\nSubd <- unique(TabelaCalcCoef$CD_GEOCODS)\nDist <- unique(TabelaCalcCoef$CD_GEOCODD)\nMun <- unique(TabelaCalcCoef$CD_GEOCODM)\n\nSubD_coef_dpp <- list()\nDist_coef_dpp <- list()\nMun_coef_dpp <- list()\n\n# função usando o data.table\nfnopt_pop <- function(par, data) {\n  (\n    data\n    [, POPEstTrecho := V002 * ((UrDs * par[1]) + (UrPd * par[2]) + (Vaz * par[3]) + (NRes * par[4]))\n      / ((AreUrDsSet * par[1]) + (AreUrPdSet * par[2]) + (AreaVazSet * par[3]) + (AreNResSet * par[4]))]\n    [, .(POPEst = sum(POPEstTrecho), POPGde = first(POP)), by = \"ID_UNICO\"]\n    [, Erro := abs(POPGde - POPEst)]\n    [, .(total = sum(Erro))]\n  )\n}\n\nfnopt_dom <- function(par, data) {\n  (\n    data\n    [, DOMEstTrecho := V001 * ((UrDs * par[1]) + (UrPd * par[2]) + (Vaz * par[3]) + (NRes * par[4]))\n      / ((AreUrDsSet * par[1]) + (AreUrPdSet * par[2]) + (AreaVazSet * par[3]) + (AreNResSet * par[4]))]\n    [, .(DOMEst = sum(DOMEstTrecho), DOMGde = first(DOM_OCU)), by = \"ID_UNICO\"]\n    [, Erro := abs(DOMGde - DOMEst)]\n    [, .(total = sum(Erro))]\n  )\n}\n\nend_time <- Sys.time()\nTempo_vars <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - população - subdistrito\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Subd) {\n  selecao <- TabelaCalcCoef[N_SubD == 1 & CD_GEOCODS == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_pop <- try(optim(par = par.ini, fn = fnopt_pop, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  SubD_coef_dpp[[i]] = data.frame(i)\n  SubD_coef_dpp[[i]]$CD_GEOCODS = i\n  SubD_coef_dpp[[i]]$pop_coefDS_SubD = ifelse(class(result_pop) == \"list\", result_pop$par[1], NA)\n  SubD_coef_dpp[[i]]$pop_coefPD_SubD = ifelse(class(result_pop) == \"list\", result_pop$par[2], NA)\n  SubD_coef_dpp[[i]]$pop_coefVZ_SubD = ifelse(class(result_pop) == \"list\", result_pop$par[3], NA)\n  SubD_coef_dpp[[i]]$pop_coefNR_SubD = ifelse(class(result_pop) == \"list\", result_pop$par[4], NA)\n  SubD_coef_dpp[[i]]$amostra_SubD = amostra\n}\n\nCoefs_SubD_pop <- bind_rows(SubD_coef_dpp) %>%\n  select(CD_GEOCODS, amostra_SubD, pop_coefDS_SubD, pop_coefPD_SubD, pop_coefVZ_SubD, pop_coefNR_SubD)\n\nend_time <- Sys.time()\nTempo_subdist_pop <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - domicílio - subdistrito\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Subd) {\n  selecao <- TabelaCalcCoef[N_SubD == 1 & CD_GEOCODS == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_dom <- try(optim(par = par.ini, fn = fnopt_dom, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  SubD_coef_dpp[[i]] = data.frame(i)\n  SubD_coef_dpp[[i]]$CD_GEOCODS = i\n  SubD_coef_dpp[[i]]$dom_coefDS_SubD = ifelse(class(result_dom) == \"list\", result_dom$par[1], NA)\n  SubD_coef_dpp[[i]]$dom_coefPD_SubD = ifelse(class(result_dom) == \"list\", result_dom$par[2], NA)\n  SubD_coef_dpp[[i]]$dom_coefVZ_SubD = ifelse(class(result_dom) == \"list\", result_dom$par[3], NA)\n  SubD_coef_dpp[[i]]$dom_coefNR_SubD = ifelse(class(result_dom) == \"list\", result_dom$par[4], NA)\n  SubD_coef_dpp[[i]]$amostra_SubD = amostra\n}\n\nCoefs_SubD_dom <- bind_rows(SubD_coef_dpp) %>%\n  select(CD_GEOCODS, amostra_SubD, dom_coefDS_SubD, dom_coefPD_SubD, dom_coefVZ_SubD, dom_coefNR_SubD)\n\nend_time <- Sys.time()\nTempo_subdist_dom <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - população - distrito\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Dist) {\n  selecao <- TabelaCalcCoef[N_Dist == 1 & CD_GEOCODD == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_pop <- try(optim(par = par.ini, fn = fnopt_pop, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  Dist_coef_dpp[[i]] = data.frame(i)\n  Dist_coef_dpp[[i]]$CD_GEOCODD = i\n  Dist_coef_dpp[[i]]$pop_coefDS_Dist = ifelse(class(result_pop) == \"list\", result_pop$par[1], NA)\n  Dist_coef_dpp[[i]]$pop_coefPD_Dist = ifelse(class(result_pop) == \"list\", result_pop$par[2], NA)\n  Dist_coef_dpp[[i]]$pop_coefVZ_Dist = ifelse(class(result_pop) == \"list\", result_pop$par[3], NA)\n  Dist_coef_dpp[[i]]$pop_coefNR_Dist = ifelse(class(result_pop) == \"list\", result_pop$par[4], NA)\n  Dist_coef_dpp[[i]]$amostra_Dist = amostra\n}\n\nCoefs_Dist_pop <- bind_rows(Dist_coef_dpp) %>%\n  select(CD_GEOCODD, amostra_Dist, pop_coefDS_Dist, pop_coefPD_Dist, pop_coefVZ_Dist, pop_coefNR_Dist)\n\nend_time <- Sys.time()\nTempo_dist_pop <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - domicílio - distrito\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Dist) {\n  selecao <- TabelaCalcCoef[N_Dist == 1 & CD_GEOCODD == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_dom <- try(optim(par = par.ini, fn = fnopt_dom, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  Dist_coef_dpp[[i]] = data.frame(i)\n  Dist_coef_dpp[[i]]$CD_GEOCODD = i\n  Dist_coef_dpp[[i]]$dom_coefDS_Dist = ifelse(class(result_dom) == \"list\", result_dom$par[1], NA)\n  Dist_coef_dpp[[i]]$dom_coefPD_Dist = ifelse(class(result_dom) == \"list\", result_dom$par[2], NA)\n  Dist_coef_dpp[[i]]$dom_coefVZ_Dist = ifelse(class(result_dom) == \"list\", result_dom$par[3], NA)\n  Dist_coef_dpp[[i]]$dom_coefNR_Dist = ifelse(class(result_dom) == \"list\", result_dom$par[4], NA)\n  Dist_coef_dpp[[i]]$amostra_Dist = amostra\n}\n\nCoefs_Dist_dom <- bind_rows(Dist_coef_dpp) %>%\n  select(CD_GEOCODD, amostra_Dist, dom_coefDS_Dist, dom_coefPD_Dist, dom_coefVZ_Dist, dom_coefNR_Dist)\n\nend_time <- Sys.time()\nTempo_dist_dom <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - população - municípios\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Mun) {\n  selecao <- TabelaCalcCoef[N_Mun == 1 & CD_GEOCODM == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_pop <- try(optim(par = par.ini, fn = fnopt_pop, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  Mun_coef_dpp[[i]] = data.frame(i)\n  Mun_coef_dpp[[i]]$CD_GEOCODM = i\n  Mun_coef_dpp[[i]]$pop_coefDS_Mun = ifelse(class(result_pop) == \"list\", result_pop$par[1], NA)\n  Mun_coef_dpp[[i]]$pop_coefPD_Mun = ifelse(class(result_pop) == \"list\", result_pop$par[2], NA)\n  Mun_coef_dpp[[i]]$pop_coefVZ_Mun = ifelse(class(result_pop) == \"list\", result_pop$par[3], NA)\n  Mun_coef_dpp[[i]]$pop_coefNR_Mun = ifelse(class(result_pop) == \"list\", result_pop$par[4], NA)\n  Mun_coef_dpp[[i]]$amostra_Mun = amostra\n}\n\nCoefs_Mun_pop <- bind_rows(Mun_coef_dpp) %>%\n  select(CD_GEOCODM, amostra_Mun, pop_coefDS_Mun, pop_coefPD_Mun, pop_coefVZ_Mun, pop_coefNR_Mun)\n\nend_time <- Sys.time()\nTempo_mun_pop <- end_time - start_time\n```\n:::\n\n\n## Cálculo dos coeficientes - domicílio - municípios\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\nfor (i in Mun) {\n  selecao <- TabelaCalcCoef[N_Mun == 1 & CD_GEOCODM == i]\n  amostra <- n_distinct(selecao$ID_UNICO)\n  result_dom <- try(optim(par = par.ini, fn = fnopt_dom, data = selecao, method = \"L-BFGS-B\", lower = lbound))\n  Mun_coef_dpp[[i]] = data.frame(i)\n  Mun_coef_dpp[[i]]$CD_GEOCODM = i\n  Mun_coef_dpp[[i]]$dom_coefDS_Mun = ifelse(class(result_dom) == \"list\", result_dom$par[1], NA)\n  Mun_coef_dpp[[i]]$dom_coefPD_Mun = ifelse(class(result_dom) == \"list\", result_dom$par[2], NA)\n  Mun_coef_dpp[[i]]$dom_coefVZ_Mun = ifelse(class(result_dom) == \"list\", result_dom$par[3], NA)\n  Mun_coef_dpp[[i]]$dom_coefNR_Mun = ifelse(class(result_dom) == \"list\", result_dom$par[4], NA)\n  Mun_coef_dpp[[i]]$amostra_Mun = amostra\n}\n\nCoefs_Mun_dom <- bind_rows(Mun_coef_dpp) %>%\n  select(CD_GEOCODM, amostra_Mun, dom_coefDS_Mun, dom_coefPD_Mun, dom_coefVZ_Mun, dom_coefNR_Mun)\n\nend_time <- Sys.time()\nTempo_mun_dom <- end_time - start_time\n```\n:::\n\n\n## Etapas finais\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time <- Sys.time()\n\n\nrm(list = setdiff(ls(), c(\"Coefs_SubD_pop\", \"Coefs_SubD_dom\", \"Coefs_Dist_pop\", \"Coefs_Dist_dom\", \"Coefs_Mun_pop\", \"Coefs_Mun_dom\",\n                          \"TabelaCalcCoef\", \"Tempo_areasurb\", \"Tempo_municipios\", \"Tempo_geoproc\", \"Tempo_tabela\", \"Tempo_vars\", \"Tempo_subdist_pop\",\n                          \"Tempo_subdist_dom\", \"Tempo_dist_pop\", \"Tempo_dist_dom\", \"Tempo_mun_pop\", \"Tempo_mun_dom\", \"Tempo_coefs\", \"Tempo_Total\", \"start_time\", \"Tempo_cons\", \"Tempo_calcarea\", \"Begin_time\")))\n\n\n\nSubD_pop_erro <- Coefs_SubD_pop$CD_GEOCODS[is.na(c(Coefs_SubD_pop$pop_coefDS_SubD))]\nSubD_dom_erro <- Coefs_SubD_dom$CD_GEOCODS[is.na(c(Coefs_SubD_dom$dom_coefDS_SubD))]\nDist_pop_erro <- Coefs_Dist_pop$CD_GEOCODD[is.na(c(Coefs_Dist_pop$pop_coefDS_Dist))]\nDist_dom_erro <- Coefs_Dist_dom$CD_GEOCODD[is.na(c(Coefs_Dist_dom$dom_coefDS_Dist))]\nMun_pop_erro <- Coefs_Mun_pop$CD_GEOCODM[is.na(c(Coefs_Mun_pop$pop_coefDS_Mun))]\nMun_dom_erro <- Coefs_Mun_dom$CD_GEOCODM[is.na(c(Coefs_Mun_dom$dom_coefDS_Mun))]\n\n# st_write(Coefs_SubD_pop, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_SubD_pop\", append = FALSE)\n# st_write(Coefs_SubD_dom, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_SubD_dom\", append = FALSE)\n# st_write(Coefs_Dist_pop, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_Dist_pop\", append = FALSE)\n# st_write(Coefs_Dist_dom, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_Dist_dom\", append = FALSE)\n# st_write(Coefs_Mun_pop, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_Mun_pop\", append = FALSE)\n# st_write(Coefs_Mun_dom, dsn = \"W:/DGC_ACERVO_CGEO/PROJETOS_EM_ANDAMENTO/Cemaden/BOLSISTAS/Joaquim/_GPKG/EstPop.gpkg\", layer = \"Coefs_Mun_dom\", append = FALSE)\n\nend_time <- Sys.time()\nTempo_coefs <- end_time - start_time\nTempo_Total <- end_time - Begin_time\n\nTempo_areasurb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.402061 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_municipios\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 48.40663 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_geoproc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 18.38137 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_cons\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.1253169 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_calcarea\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.04457402 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_tabela\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 2.595865 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_vars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.0139761 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_subdist_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 2.148308 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_subdist_dom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.797491 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_dist_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 2.157917 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_dist_dom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.712999 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_mun_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 2.170332 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_mun_dom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.75027 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_coefs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.01015401 secs\n```\n:::\n\n```{.r .cell-code}\nTempo_Total\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.369149 mins\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}